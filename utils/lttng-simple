#!/usr/bin/python
# given a command, trace the application with ust, kernel or both
# kernel tracing is enabled only if the user has appropriate rights
# the basename of the command will be used as the directory if none is provided

from optparse import OptionParser
import os
import sys
import subprocess
import time
from os.path import join
import logging
from subprocess import CalledProcessError
import shutil
import uuid
from pathlib import Path
import glob

# the lttng command
LTTNG="lttng"

usage = """usage: %prog [options] -- [command]

Run command under tracing. If no kernel or ust option is provided,
then trace command under kernel, ust and both tracers enabled. The type of
the trace is indicated by appending a suffix to the trace output directory."""

dry_run = False
log_stream = sys.stdout
clear_trace = False
current = ""

minimal_events = [
    "sched_wakeup",
    "sched_wakeup_new",
    "sched_switch",
    "irq_handler_entry",
    "irq_handler_exit",
    "irq_softirq_entry",
    "irq_softirq_exit",
    "irq_softirq_raise",
]

default_evlist = "default"
evlist_search_path = [ os.getenv("PWD"),
                       os.path.join(os.getenv("HOME"), ".workload-kit/"),
                       os.getenv("WK_PROFILE_DIR"),
                       "/usr/local/share/workload-kit/scripts/profiles/",
                       "/usr/share/workload-kit/scripts/profiles/" ]

def cmd_stub(cmds, check, cmd_env=None, with_shell=False):
    if cmd_env is None:
        cmd_env = os.environ
    logging.debug("LD_PRELOAD=" + cmd_env.get("LD_PRELOAD", ""))
    logging.debug("exec: " + " ".join(cmds))
    retcode = 0
    if (dry_run == False):
        retcode = subprocess.call(cmds, stdout=log_stream, stderr=log_stream, env=cmd_env)
        logging.debug("exit: " + str(retcode))
    if (check and retcode != 0):
        cmd_stub([LTTNG,"destroy", current], False)
        raise Exception("command failed")

def find_event_file(searchpath, name):
    print(searchpath)
    for directory in searchpath:
        if directory is None:
            continue
        evfile = os.path.join(directory, name)
        if os.path.exists(evfile):
            return evfile
    return None

def load_event_list(name):
    evs = []
    evfile = name
    if (not os.path.exists(name)):
        evfile = find_event_file(evlist_search_path, name + ".list")
    if (evfile is None):
        logging.warning("event list " + name + " not found")
        return evs
    logging.info("using event list " + evfile)
    f = open(evfile)
    orig = f.readlines();
    for ev in orig:
        evs.append(ev.strip())
    return evs

def get_profiles(searchpath):
    profiles = {}
    for directory in searchpath:
        if directory is None:
            continue
        items = glob.glob(directory + "/*.list")
        for item in items:
            path = Path(item)
            stem = path.stem
            profiles[stem] = item
    return profiles

def do_trace(cmd, session, options, evlist, kernel, ust):
    if (not (kernel or ust)):
        return
    if (kernel):
        session += "-k"
    if (ust):
        session += "-u"
    out = join(options.output, session)
    # generate random uuid
    current = session + "-" + str(uuid.uuid4())

    logging.info("start tracing: " + current)  
    # Checks and cleanup
    if (os.path.isdir(out)):
        if (clear_trace == True):
            if (dry_run == False):
                logging.debug("Removing trace: " + out)
                shutil.rmtree(out)
            else:
                logging.debug("Would remove trace: " + out)
        else:
            logging.warning("Append to existing trace: " + out)

    # Step 1: start session
    try:
        cmd_stub([LTTNG, "create", current, "-o", out], True)
    except Exception as e:
        # if it fails, it may be stalled, try again, but make failure fatal
        cmd_stub([LTTNG, "destroy", current], False)
        cmd_stub([LTTNG, "create", current, "-o", out], True)
    
    # Step 2: enable required events
    add_context = False
    if (kernel):
        cmd_stub([LTTNG, "enable-channel", "k", "-k", "--subbuf-size", "16384", "--num-subbuf", "4096"], True)
        # enable pid/tid context if there is no sched_switch event
        if (not "sched_switch" in evlist or options.stateless):
            add_context = True
            cmd_stub([LTTNG, "add-context", "-k", "-c", "k", "-t", "pid", "-t", "tid", "-t", "procname"], True)
        if (options.syscall):
            # do not check the return code, see http://bugs.lttng.org/issues/847
            cmd_stub([LTTNG, "enable-event", "-c", "k", "-a", "-k", "--syscall"], False)
        if (options.enable_all_events):
            cmd_stub([LTTNG, "enable-event", "-c", "k", "-a", "-k"], True)
        else:
            for ev in evlist:
                cmd_stub([LTTNG, "enable-event", "-k", "-c", "k", ev], True)
    if (ust):
        cmd_stub([LTTNG, "enable-channel", "u", "-u", "--subbuf-size", "4194304", "--num-subbuf", "64"], True)
        cmd_stub([LTTNG, "enable-event", "-c", "u", "-a", "-u"], True)
        if not kernel or add_context:
            cmd_stub([LTTNG, "add-context", "-c", "u", "-u", "-t", "vpid", "-t", "vtid"], True)
    
    # Step 3: start tracing
    cmd_stub([LTTNG, "start"], True)
    
    if (options.daemon):
        logging.info("daemon mode")
        return

    # Step 4: run the program under tracing
    # Do not check the return value
    cmd_env = os.environ;
    if options.libc_wrapper:
        cmd_env = os.environ.copy()
        cmd_env["LD_PRELOAD"] = "liblttng-ust-libc-wrapper.so"

    # surround cmd with sleep to get a better execution window
    if (cmd is not None):
        time.sleep(0.1)
        logging.info("Executing command: " + " ".join(cmd))
        cmd_stub(cmd, False, cmd_env)
    time.sleep(0.1)
    
    # Step 5: tear down
    cmd_stub([LTTNG,"stop"], False)
    cmd_stub([LTTNG,"destroy", current], False)
    logging.info("done tracing: " + current)

if __name__=="__main__":
    # default directory for traces
    destdir = os.getenv("LTTNG_TRACE_HOME")
    if destdir is None:
        destdir = os.getcwd()

    parser = OptionParser(usage=usage)
    parser.add_option("-k", "--kernel", dest="kernel", default=False, action="store_true", help="Trace only the kernel")
    parser.add_option("-u", "--ust", dest="ust", default=False, action="store_true", help="Trace only user space")
    parser.add_option("-o", "--output", dest="output", help="Output base directory for traces", metavar="DIR", default=destdir)
    parser.add_option("-b", "--batch", dest="batch", help="Run and trace all executables from this dir", metavar="DIR")
    parser.add_option("-d", "--daemon", dest="daemon", default=False, action="store_true", help="Start tracing in background")
    parser.add_option("-l", "--log", dest="log", metavar="FILE", help="Log file", default=None)
    parser.add_option("-n", "--dry-run", dest="dry_run", default=False, action="store_true", help="Do not execute commands")
    parser.add_option("-e", "--enable-event-list", dest="evlist", help="White list of events to enable")
    parser.add_option("--list-profiles", dest="list_profiles", default=False, action="store_true", help="List event profiles")
    parser.add_option("-a", "--all", dest="enable_all_events", default=False, action="store_true", help="Enable all events")
    parser.add_option("--enable-libc-wrapper", dest="libc_wrapper", default=False, action="store_true", help="Enable UST libc wrapper")
    parser.add_option("-s", "--syscall", dest="syscall", default=False, action="store_true", help="Enable syscall tracing")
    parser.add_option("--stateless", dest="stateless", default=False, action="store_true", help="Enable pid/tid/procname context for stateless trace processing")
    parser.add_option("--name", dest="name", metavar="NAME", default=None, help="trace output name (default to command name with k/u suffix)")
    parser.add_option("-c", "--clear", dest="clear_trace", default=False, action="store_true", help="Remove previous trace if exists")
    parser.add_option("-v", "--verbose", dest="verbose", default=False, action="store_true", help="Verbose mode")

    (options, args) = parser.parse_args()

    if (options.list_profiles):
        profiles = get_profiles(evlist_search_path)
        print("Available profiles:")
        for p in profiles.keys():
            print(p)
        sys.exit(0)

    # Load event list if specified
    events = minimal_events
    if options.evlist:
        events = load_event_list(options.evlist)

    # try to create base directory if it doesn't exists
    if not os.path.exists(options.output):
        os.makedirs(options.output)

    # Consider that if no options for kernel or user space is provided
    # do the experiment by tracing kernel, ust and both
    if (not (options.kernel or options.ust)):
        options.kernel = True
        options.ust = True

    dry_run = options.dry_run
    clear_trace = options.clear_trace
    fmt = '%(asctime)s %(levelname)s: %(message)s'
    log_level = logging.DEBUG if options.verbose else logging.INFO
    if (options.log is not None):
        logging.basicConfig(filename=options.log, level=log_level, format=fmt)
    else:
        logging.basicConfig(level=log_level, format=fmt)

    logger = logging.getLogger()
    log_stream = logger.handlers[0].stream

    targets = []
    if (options.batch is None):
        target = {"name": "default", "cmd": None}
        if (args is not None and type(args) is list and len(args) > 0):
            target["name"] = os.path.basename(args[0])
            target["cmd"] = args
        # overide session name
        if (options.name is not None):
            target["name"] = options.name
        targets.append(target)
    else:
        # Add all scripts from the directory
        if (options.daemon):
            raise RuntimeError("The batch mode is incompatible with daemon mode")
        for exe in os.listdir(options.batch):
            file = join(options.batch, exe)
            if (os.path.isfile(file)):
                target = {"name":exe, "cmd":[file]}
                targets.append(target)

    if (len(targets) == 0):
        print("Error: Nothing to trace!")
        parser.print_help()
        sys.exit(1)
    try:
        for t in targets:
            if (options.ust and options.kernel):
                do_trace(t["cmd"], t["name"], options, events, kernel=True, ust=True)
            elif (options.kernel):
                do_trace(t["cmd"], t["name"], options, events, kernel=True, ust=False)
            elif (options.ust):
                do_trace(t["cmd"], t["name"], options, events, kernel=False, ust=True)
    except Exception as e:
        logging.error(str(e))
        cmd_stub([LTTNG,"destroy", "-a"], False)
    else:
        logging.debug("done")
